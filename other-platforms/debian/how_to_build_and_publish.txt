first (on debian host install docker engine, install docker (if doesn't exists)
sudo apt update
sudo apt install -y ca-certificates curl gnupg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io

second (on debian, build output docker file)
cd ścieżka/do/twojego/projektu
sudo docker build -t aspnetcorewebapi:latest .
sudo docker save -o aspnetcorewebapi.tar aspnetcorewebapi:latest
sudo chmod 777 aspnetcorewebapi.tar

third (move tar file to production debian)
move file aspnetcorewebapi.tar to Debian using ssh via putty or winscp on windows

fourth (on production server)
cd /home/user
sudo docker load < aspnetcorewebapi.tar
sudo docker run -d -p 8080:8080 -p 8081:8081 -v /etc/ssl:/etc/ssl:ro aspnetcorewebapi:latest
(default  location where docker is installed /var/lib/docker)

sixth (verification)
sudo docker ps
http://ip_debian_address:8080


//bellow not tested fully, curentaly not work
//on https 8081 currently doesn't work yet on remote host
fifth (https, generate self signed cert on debian - if doesn't exist or use existing certificate on production server - recommend)
openssl genrsa -out aspnetcorewebapi.key 2048
openssl req -x509 -new -nodes -key aspnetcorewebapi.key -sha256 -days 365 -out aspnetcorewebapi.crt -subj "/CN=localhost"
openssl pkcs12 -export -out aspnetcorewebapi.pfx -inkey aspnetcorewebapi.key -in aspnetcorewebapi.crt -password pass:Example5%Password

//lazydocker tools to work in docker (optional)
//lazy docker
su -
(log on as root)
curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash

nano /root/.bashrc
export PATH="$HOME/.local/bin:$PATH"
(ctrl+o
ctrl+x)

source /root/.bashrc

lazydocker

//seq (optional log)
mkdir -p /opt/seq
apt install nginx -y
docker stop seq && docker rm seq
docker run -d   --name seq   -e ACCEPT_EULA=Y   -p 127.0.0.1:5341:80   -v /opt/seq:/data   datalust/seq:latest
nano /etc/nginx/sites-available/seq

server {
    listen 443 ssl;
    server_name my-lan-ip;

    ssl_certificate     /etc/nginx/ssl/seq.crt;
    ssl_certificate_key /etc/nginx/ssl/seq.key;

    location / {
        proxy_pass http://127.0.0.1:5341;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 80;
    server_name my-lan-ip;

    return 301 https://$host$request_uri;
}

(ctrl+o
ctrl+x)

   55  ln -s /etc/nginx/sites-available/seq /etc/nginx/sites-enabled/
   63  mkdir -p /etc/nginx/ssl
   64  openssl req -x509 -nodes -days 3650 -newkey rsa:2048   -keyout /etc/nginx/ssl/seq.key   -out /etc/nginx/ssl/seq.crt   -subj "/C=PL/ST=State/L=City/O=MyCompany/OU=IT/CN=my-lan-ip"
67  nginx -t && systemctl reload nginx
   68  rm /etc/nginx/sites-enabled/default
   69  nginx -t && systemctl reload nginx

(autostart after restart)
systemctl enable docker
systemctl status docker
docker update --restart unless-stopped seq

